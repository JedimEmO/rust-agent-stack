name: Code Security Analysis

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  clippy-security:
    name: Clippy Security Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-

      - name: Run Clippy with security lints
        run: |
          cargo clippy --workspace --all-targets --all-features -- \
            -D warnings \
            -W clippy::dbg_macro \
            -W clippy::todo \
            -W clippy::unimplemented \
            -W clippy::mem_forget \
            -W clippy::disallowed_methods \
            -W clippy::expect_used \
            -W clippy::panic \
            -W clippy::unwrap_used \
            -W clippy::indexing_slicing

      - name: Run Clippy (JSON output for SARIF)
        run: |
          cargo clippy --workspace --all-targets --all-features --message-format=json -- \
            -D warnings \
            -W clippy::dbg_macro \
            -W clippy::todo \
            -W clippy::unimplemented \
            -W clippy::mem_forget \
            -W clippy::disallowed_methods \
            -W clippy::expect_used \
            -W clippy::panic \
            -W clippy::unwrap_used \
            -W clippy::indexing_slicing \
            > clippy-results.json
        continue-on-error: true

      - name: Upload Clippy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: clippy-results
          path: clippy-results.json

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/rust
            p/jwt
            p/owasp-top-ten
            p/r2c-security-audit
          generateSarif: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  rust-sec-check:
    name: Additional Rust Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-sec-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-sec-

      - name: Check for unsafe code
        run: |
          echo "Checking for unsafe code usage..."
          ! grep -rn "unsafe" --include="*.rs" crates/ examples/ || echo "::warning::Found unsafe code blocks"

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          ! grep -rEn "(password|secret|api_key|token)\s*=\s*\"[^\"]{8,}\"" --include="*.rs" crates/ examples/ || echo "::warning::Found potential hardcoded secrets"

      - name: Check for TODO security items
        run: |
          echo "Checking for security-related TODOs..."
          grep -rEn "TODO.*security|FIXME.*security|XXX.*security" --include="*.rs" crates/ examples/ || echo "No security TODOs found"